{"version":3,"sources":["getWeb3.js","components/games/game.jsx","components/games/list.jsx","components/tic-tac-toe/box.jsx","components/tic-tac-toe/board.jsx","components/tic-tac-toe/message.jsx","components/tic-tac-toe/game.jsx","models/casino.js","components/sidebar/Sidebar.jsx","components/Welcome.jsx","components/CreateGame.jsx","App.jsx","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","GameRow","state","id","type","contract","registrator","isX","isActive","ready","componentDidMount","props","address","eth","Contract","TicTacToeContract","abi","methods","name","call","bet","tip","toLowerCase","playerX","playerO","setState","this","registerX","player","send","from","value","openGame","registerO","onOpenGame","registerButton","Button","onClick","bind","joinAsX","joinAsO","utils","fromWei","className","Component","GameList","games","length","Table","responsive","map","game","i","Array","fill","idx","style","margin","backgroundColor","width","paddingTop","paddingBottom","textAlign","cursor","Box","Col","color","Board","Container","maxWidth","_","Row","j","pos","Message","isWon","board","lines","b","c","fmtAddress","substring","TicTacToeGame","isPlayer","moves","winner","Number","turn","keys","move","who","when","events","Move","err","evt","returnValues","_who","_turn","_pos","_when","XWin","winnerEvt","OWin","Draw","End","Transfer","PlayerXJoined","PlayerOJoined","turnForX","validPlayer","push","wei","unit","toString","msg","handleInput","opponent","Casino","CasinoContract","openGamesList","activeGamesList","newTicTacToeGame","Sidebar","xs","href","Nav","activeKey","view","onSelect","selectedKey","onViewChange","variant","Item","Link","eventKey","balance","casinoAddress","casinoBalance","Welcome","fluid","CreateGame","useState","setBet","error","setError","creatingGame","setCreatingGame","createGame","e","betWei","toWei","tx","casino","createGameTicTacToe","NewTicTacToeGame","on","receipt","onChange","target","margingTop","lineHeight","padding","Spinner","animation","size","Alert","message","App","accounts","activeGame","getAccounts","x","getActiveGames","getBalance","filter","interval","setInterval","onRefresh","alert","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa1a05aa.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport TicTacToeContract from \"../../contracts/TicTacToe.json\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport web3 from 'web3';\r\n\r\nexport class GameRow extends Component {\r\n    state = { id: null, type: null, contract: null, registrator: null, isX: null, isActive: null, ready: false }\r\n\r\n    componentDidMount = async () => {\r\n        const web3 = this.props.web3;\r\n        const address = this.props.address;\r\n\r\n        const contract = new web3.eth.Contract(TicTacToeContract.abi, address);\r\n\r\n        this.setState({\r\n            id: this.props.id,\r\n            contract: contract,\r\n            type: await contract.methods.name().call(),\r\n            bet: await contract.methods.bet().call(),\r\n            tip: await contract.methods.tip().call(),\r\n            registrator: (await contract.methods.registrator().call()).toLowerCase(),\r\n            isActive: await contract.methods.isActive().call(),\r\n            playerX: (await contract.methods.playerX().call()).toLowerCase(),\r\n            playerO: (await contract.methods.playerO().call()).toLowerCase(),\r\n            ready: true\r\n        });\r\n    }\r\n\r\n    async joinAsX() {\r\n        await this.state.contract.methods.registerX(this.props.player.address).send({ from: this.props.player.address, value: this.state.bet });\r\n        this.openGame();\r\n    }\r\n\r\n    async joinAsO() {\r\n        await this.state.contract.methods.registerO(this.props.player.address).send({ from: this.props.player.address, value: this.state.bet });\r\n        this.openGame();\r\n    }\r\n\r\n    openGame() {\r\n        this.props.onOpenGame(this.props.address);\r\n    }\r\n\r\n    render() {\r\n\r\n        let registerButton = null;\r\n        if (this.state.playerX === this.props.player.address || this.state.playerO === this.props.player.address) {\r\n            registerButton = <Button onClick={this.openGame.bind(this)}>Open game</Button>\r\n        } else if (this.state.playerX === \"0x0000000000000000000000000000000000000000\") {\r\n            registerButton = <Button onClick={this.joinAsX.bind(this)}>Join as X</Button>\r\n        } else if (this.state.playerO === \"0x0000000000000000000000000000000000000000\") {\r\n            registerButton = <Button onClick={this.joinAsO.bind(this)}>Join as O</Button>\r\n        }\r\n\r\n        if (this.state.ready) {\r\n            return (\r\n                <tr>\r\n                    <td>{this.state.id}</td>\r\n                    <td>{this.state.type}</td>\r\n                    <td>{web3.utils.fromWei(this.state.bet)} ETH</td>\r\n                    <td><small className=\"fs-9 fw-lighter badge bg-secondary\">{this.props.address}</small></td>\r\n                    <td><small className=\"fs-9 fw-lighter badge bg-secondary\">{this.state.registrator}</small></td>\r\n                    <td>{registerButton}</td>\r\n                </tr>\r\n            );\r\n        } else {\r\n            return (\r\n                <tr className=\"placeholder-glow\">\r\n                    <td><span className=\"placeholder col-9\"></span></td>\r\n                    <td><span className=\"placeholder col-9\"></span></td>\r\n                    <td><span className=\"placeholder col-9\"></span></td>\r\n                    <td><span className=\"placeholder col-9\"></span></td>\r\n                    <td><span className=\"placeholder col-9\"></span></td>\r\n                    <td><Button className=\"placeholder\"></Button></td>\r\n                </tr>\r\n            );\r\n        }\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { GameRow } from \"./game\";\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass GameList extends Component {\r\n    state = {}\r\n\r\n    componentDidMount = async () => {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"display-1\">Active games</h1>\r\n                {this.props.games.length > 0 &&\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Game type</th>\r\n                                    <th>Bet</th>\r\n                                <th>Game address</th>\r\n                                <th>Registered by</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.props.games.map((game, i) => <GameRow web3={this.props.web3} address={game} player={this.props.player} key={game} onOpenGame={this.props.onOpenGame} />)}\r\n                        </tbody>\r\n                    </Table>\r\n                }\r\n                {this.props.games.length > 0 ||\r\n                    <div>\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Game type</th>\r\n                                    <th>Bet</th>\r\n                                    <th>Game address</th>\r\n                                    <th>Registered by</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {Array(10).fill().map((i, idx) => <tr className=\"placeholder-glow\" key={idx}>\r\n                                    <td><span className=\"placeholder col-2\"></span></td>\r\n                                    <td><span className=\"placeholder col-7\"></span></td>\r\n                                    <td><span className=\"placeholder col-9\"></span></td>\r\n                                    <td><span className=\"placeholder col-9\"></span></td>\r\n                                    <td><Button className=\"placeholder col-7\"></Button></td>\r\n                                </tr>)}\r\n                            </tbody>\r\n                        </Table>\r\n                        <p>There are no active games</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameList","import React from 'react'\r\nimport Col from 'react-bootstrap/esm/Col'\r\n\r\n// just making the border thicker and increasing size of the fonts\r\nconst style = {\r\n\tmargin: \"10px\",\r\n\tbackgroundColor: \"#e0e0e0\",\r\n\twidth: \"250px\",\r\n\tpaddingTop: \"100px\",\r\n\tpaddingBottom: \"100px\",\r\n\ttextAlign: \"center\",\r\n\tcursor: \"pointer\"\r\n}\r\n\r\n\r\n/*\r\nBox.jsx is the discrete unit structure of the Board.\r\nIt is made a button.\r\nWhen its pressed it will call the function passed from porps.\r\nIt will display value that is passed from Board\r\n*/\r\nexport const Box = (props) => <Col name={props.name} style={{...style, color: props.value? null: '#e0e0e0'}} onClick={props.onClick} className=\"display-1\"> {props.value ? props.value: 'E'} </Col>\r\n\r\nexport default Box","import React from 'react'\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport Row from 'react-bootstrap/esm/Row';\r\nimport Box from './box'\r\n\r\n\r\n// creating a sqaure box in with grid layout\r\nconst style = {\r\n    width: \"250px\",\r\n    height: \"250px\",\r\n    margin: \"0 auto\",\r\n    display: \"grid\",\r\n    gridTemplate: \"repeat(3, 1fr) / repeat(3, 1fr)\",\r\n};\r\n\r\n// props has 'value' which is a array of 9 charectors that needs to de displayed in box.js\r\n// and a 'onClick' function that needs to be called when button is clicked\r\n// restoring array of box.jsx\r\nconst Board = (props) => (\r\n    <Container style={{ maxWidth: \"900px\"}}>\r\n        {[...Array(3)].map((_, i) => {\r\n            return <Row key={i}>\r\n                {[...Array(3)].map((_, j) => {\r\n                    const pos = i*3 + j;\r\n                    return <Box key={pos} name={pos} onClick={()=>props.onClick(pos)} value={props.value[pos]}/>\r\n                })}\r\n            </Row>\r\n        })}\r\n    </Container>\r\n)\r\n\r\nexport default Board","import React from 'react'\r\n\r\nconst style = {\r\n\ttextAlign:'center'\r\n};\r\n\r\nconst Message = (props) => <h1 className=\"display-6\" name={\"msg\"} style={style}>{props.value}</h1>\t\r\n\r\nexport default Message","import React, { Component } from 'react'\r\nimport Board from './board'\r\nimport Message from './message'\r\nimport web3 from 'web3';\r\nimport TicTacToeContract from \"../../contracts/TicTacToe.json\";\r\n\r\n\r\nconst isWon = (board) => {\r\n    // list of postion that is winning\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    // checking each of the postition seeing if the combination is there\r\n    // if it does return the True\r\n    // else return false\r\n    for (let i=0; i< lines.length; i++) {\r\n        let [a, b, c] = lines[i];\r\n        //console.log(board[a] === board[b] && board[a] === board[c])\r\n        if (board[a] !== \"\" && board[a] === board[b] && board[a] === board[c]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst fmtAddress = (address) => {\r\n    if (!address) return \"\";\r\n    return address.substring(0, 6) + \"...\" + address.substring(address.length - 4);\r\n}\r\n\r\nclass TicTacToeGame extends Component {\r\n    state = { board: Array(9).fill(\"\"), isPlayer: \"X\", contract: null, playerX: null, playerO: null, moves: [], winner: null, bet: \"0\", tip: \"0\" };\r\n\r\n    validPlayer(player) {\r\n        if (!player) {\r\n            return false;\r\n        }\r\n        return player !== '0x0000000000000000000000000000000000000000';\r\n    }\r\n\r\n    msg() {\r\n        const turn = this.state.moves.length;\r\n        const turnForX = turn % 2 === 0;\r\n\r\n        if (!this.validPlayer(this.state.playerX) || !this.validPlayer(this.state.playerO)) {\r\n            return \"Wait for another player to join the game\";\r\n        }\r\n\r\n        if (this.state.winner === \"X\") {\r\n            return \"X won!\";\r\n        }\r\n        if (this.state.winner === \"O\") {\r\n            return \"O won!\";\r\n        }\r\n        if ((turnForX && this.props.player.address === this.state.playerX) || (!turnForX && this.props.player.address === this.state.playerO)) {\r\n            return \"It's your move!\";\r\n        }\r\n        return \"Wait for the other player to move\";\r\n    }\r\n\r\n    move(who, turn, pos, when) {\r\n        this.setState((state, props) => {\r\n            const moves = [...state.moves];\r\n            const board = [...state.board];\r\n            moves.push({ who, turn, pos, when });\r\n            board[pos] = turn % 2 === 0? \"X\": \"O\";\r\n            return { moves, board };\r\n        })\r\n    }\r\n    \r\n    componentDidMount = async () => {\r\n        const contract = new this.props.web3.eth.Contract(TicTacToeContract.abi, this.props.address);\r\n        const playerX = (await contract.methods.playerX().call()).toLowerCase();\r\n        const playerO = (await contract.methods.playerO().call()).toLowerCase();\r\n        const bet = await contract.methods.bet().call();\r\n        const tip = await contract.methods.tip().call();\r\n        const turn = Number(await contract.methods.turn().call());\r\n        if (turn > 0) {\r\n            Array.from(Array(turn).keys()).map(async (i) => {\r\n                const move = await contract.methods.moves(i).call();\r\n                this.move(move.who, move.turn, move.pos, move.when);\r\n            });\r\n        }\r\n\r\n        // get current board and move history\r\n\r\n        // register for events\r\n        contract.events.Move((err, evt) => {\r\n            this.move(\r\n                evt.returnValues._who,\r\n                evt.returnValues._turn,\r\n                evt.returnValues._pos,\r\n                evt.returnValues._when\r\n            );\r\n        });\r\n\r\n        contract.events.XWin((err, evt) => {\r\n            console.log(\"X Win!!!\");\r\n            console.log(evt);\r\n            this.setState({ winner: 'X', winnerEvt: evt });\r\n        });\r\n        \r\n        contract.events.OWin((err, evt) => {\r\n            console.log(\"X Win!!!\");\r\n            console.log(evt);\r\n            this.setState({ winner: 'O', winnerEvt: evt });\r\n        });\r\n        \r\n        contract.events.Draw((err, evt) => {\r\n            console.log(\"Draw!!!\");\r\n            console.log(evt);\r\n        });\r\n        \r\n        contract.events.End((err, evt) => {\r\n            console.log(\"End!!!\");\r\n            console.log(evt);\r\n        });\r\n\r\n        contract.events.Transfer((err, evt) => {\r\n            console.log(\"Transfer!!!\");\r\n            console.log(evt);\r\n        });\r\n\r\n        contract.events.PlayerXJoined(async (err, evt) => {\r\n            console.log(\"PlayerXJoined\")\r\n            console.log(evt)\r\n            const playerX = (await contract.methods.playerX().call()).toLowerCase();\r\n            this.setState({ playerX });\r\n        })\r\n\r\n        contract.events.PlayerOJoined(async (err, evt) => {\r\n            console.log(\"PlayerOJoined\")\r\n            console.log(evt)\r\n            const playerO = (await contract.methods.playerO().call()).toLowerCase();\r\n            this.setState({ playerO });\r\n        })\r\n\r\n        this.setState({ contract, playerX, playerO, bet, tip }, () => {\r\n            if (isWon(this.state.board)) {\r\n                const winner = turn % 2 === 0? 'X' : 'O';\r\n                this.setState({ winner });\r\n            }\r\n        });\r\n    }\r\n    \r\n    fmtWei(wei, unit=\"ether\") {\r\n        if (!wei) {\r\n            return this.props.web3.utils.fromWei(\"0\", unit);\r\n        }\r\n        return this.props.web3.utils.fromWei(wei.toString(), unit);\r\n    }\r\n  \r\n    refresh() {\r\n    }\r\n \r\n    handleInput(pos) {\r\n        if (this.state.isPlayer === \"\" || this.state.board[pos] !== \"\") {\r\n            //is the game is over don't play\r\n            // if the box has been clocked already then return\r\n            return;\r\n        }\r\n\r\n        if (!this.validPlayer(this.state.playerX) || !this.validPlayer(this.state.playerO)) {\r\n            // No player has joined yet\r\n            return;\r\n        }\r\n\r\n        const turn = this.state.moves.length;\r\n        const turnForX = turn % 2 === 0;\r\n        if ((turnForX && this.props.player.address === this.state.playerX) || (!turnForX && this.props.player.address === this.state.playerO)) {\r\n            this.state.contract.methods.move(pos).send({ from: this.props.player.address });\r\n        } else {\r\n            console.log(`Illegal movement pos=${pos} at turn=${turn}, turnForX=${turnForX}`)\r\n        }\r\n    }\r\n\r\n    opponent() {\r\n        const isPlayerX = this.props.player.address === this.state.playerX;\r\n        return isPlayerX? this.state.playerO : this.state.playerX;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"display-1\">Tic Tac Toe game</h1>\r\n                <h1 className=\"display-6\">Playing for {web3.utils.fromWei(this.state.bet)} ETH ({web3.utils.fromWei(this.state.tip)} ETH tip to the casino + 3% fees)</h1>\r\n                <Message value={this.msg()} />\r\n                <Board onClick={this.handleInput.bind(this)} value={this.state.board} /> \r\n                <p>Player's address: <i>{fmtAddress(this.props.player.address)}</i></p>\r\n                <p>Opponent's address: <i>{fmtAddress(this.opponent())}</i></p>\r\n                <p>Contract's address: <i>{fmtAddress(this.props.address)}</i></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TicTacToeGame","import CasinoContract from \"../contracts/Casino.json\";\r\n\r\nclass Casino {\r\n    constructor(web3, address) {\r\n        this.web3 = web3\r\n        this.contract = new web3.eth.Contract(CasinoContract.abi, address);\r\n    }\r\n\r\n    async getOpenGames() {\r\n        const games = await this.contract.methods.openGamesList().call();\r\n        return games;\r\n    }\r\n\r\n    async getActiveGames() {\r\n        const games = await this.contract.methods.activeGamesList().call();\r\n        return games;\r\n    }\r\n\r\n    createGameTicTacToe(player, isX, bet) {\r\n        return this.contract.methods.newTicTacToeGame(player, isX).send({ from: player, value: bet });\r\n    }\r\n\r\n}\r\n\r\nexport default Casino;","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport web3 from 'web3';\r\n\r\nconst Sidebar = (props) => {\r\n    return (\r\n        <Col className=\"flex-shrink-0 p-3 text-white bg-dark\" xs={3}>\r\n            <a href=\"/\" className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none\">\r\n                <span className=\"fs-4\">ethCasino</span>\r\n            </a>\r\n            <hr />\r\n\r\n            <Nav\r\n                activeKey={props.view}\r\n                onSelect={(selectedKey) => props.onViewChange(selectedKey)}\r\n                variant=\"pills\"\r\n                className=\"flex-column\"\r\n            >\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"welcome\">Home</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"list-games\">Active games</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"create-game\">Create Game</Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n\r\n            <hr/>\r\n            <p>Active account: <small className=\"fs-9 fw-lighter badge bg-secondary\">{props.player.address}</small></p>\r\n            <p>Balance: {web3.utils.fromWei(props.player.balance)} ETH</p>\r\n            <hr/>\r\n            <p>Casino address: <small className=\"fs-9 fw-lighter badge bg-secondary\">{props.casinoAddress}</small></p>\r\n            <p>Balance: {web3.utils.fromWei(props.casinoBalance)} ETH</p>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport web3 from 'web3';\r\n\r\nconst Welcome = (props) => {\r\n    return (\r\n        <Container fluid className=\"full-height\">\r\n            <Row className=\"align-items-center full-height\">\r\n                <Col>\r\n                    <h1 className=\"display-1\">Welcome to the ethCasino POC</h1>\r\n                    <h1 className=\"display-3\">To start playing, please join one game from the list, or create a new game yourself.</h1>\r\n                    <h1 className=\"display-3\">The total funds collected by the casino are {web3.utils.fromWei(props.casinoBalance)} ETH</h1>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Welcome;","import React, { useState } from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport web3 from 'web3';\r\n\r\nconst CreateGame = (props) => {\r\n    const [bet, setBet] = useState(10.0);\r\n    const [error, setError] = useState(null);\r\n    const [receipt, setReceipt] = useState(null);\r\n    const [creatingGame, setCreatingGame] = useState(null);\r\n\r\n    const createGame = (isX, e) => {\r\n        const betWei = web3.utils.toWei(bet.toString())\r\n        console.log(`Create game as x=${isX}, player=${props.player}, bet=${bet} betWei=${betWei}`)\r\n\r\n        // call the casino contract to deploy a new game contract with our account as registrator\r\n        const tx = props.casino.createGameTicTacToe(props.player.address, isX, betWei);\r\n\r\n        props.casino.contract.events.NewTicTacToeGame(async (err, evt) => {\r\n            const id = evt.returnValues.id;\r\n            const address = await props.casino.contract.methods.games(id).call();\r\n            console.log('New TicTacToeGame')\r\n            console.log(evt)\r\n            props.onOpenGame(address);\r\n        })\r\n        \r\n        /* this UX is not good, lets just report the error for noe\r\n        tx.on('transactionHash', (hash) => {\r\n\r\n        }).on('receipt', (receipt) => {\r\n            setReceipt(receipt);\r\n            setCreatingGame(null);\r\n        }).on('confirmation', (confirmation, receipt, latestBlockHash) => {\r\n            setReceipt(receipt);\r\n            setCreatingGame(null);\r\n        }).on('error', (error, receipt) => {\r\n            setError(error);\r\n            setReceipt(receipt);\r\n            setCreatingGame(null);\r\n        });\r\n        */\r\n\r\n        tx.on('error', (error, receipt) => {\r\n            setError(error);\r\n        });\r\n\r\n        // the new game will be detected on an event\r\n        setCreatingGame({ tx, isX });\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"display-1\">Create new Tic Tac Toe game</h1>\r\n                    <p className=\"display-6\">\r\n                        Creating a new game deploys a new smart contract with the game rules, and automatically places a bet.\r\n                        The game will be listed in the casino list.\r\n                        When the game is accepted by someone else, the bet will be matched and the game will start.\r\n                    </p>\r\n                    <p className=\"display-6\">The casino takes 3% fee of the pot.</p>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"display-3\">Select how much you want to bet</h1>\r\n                    <input type=\"numeric\" value={bet} onChange={(evt) => setBet(evt.target.value) } /> ETH\r\n                </Col>\r\n            </Row>\r\n            { !creatingGame &&\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1 className=\"display-3\" style={{margingTop: '300px'}}>Select what you want to play</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"align-items-center\">\r\n                        <Col className=\"text-center\" onClick={(e) => createGame(true, e)} style={{lineHeight: '300px', backgroundColor: '#ff7b7b', cursor: 'pointer', padding: '100px 0'}}>\r\n                            <h1 className=\"display-1\">X</h1>\r\n                        </Col>\r\n                        <Col className=\"text-center\" onClick={(e) => createGame(false, e)} style={{lineHeight: '300px', backgroundColor: '#72baff', cursor: 'pointer', padding: '100px 0'}}>\r\n                            <h1 className=\"display-1\">O</h1>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            }\r\n            { !!creatingGame &&\r\n                <Row>\r\n                    <Col>\r\n                        <h1 className=\"display-3\">Creating game...</h1>\r\n                        <Spinner animation=\"grow\" size=\"lg\" />{' '}\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            { !!error &&\r\n                <Row>\r\n                    <Col>\r\n                        <h1 className=\"display-3\">Error during the last transaction</h1>\r\n                        <Alert variant=\"danger\">{error.message}</Alert>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default CreateGame;","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport GameList from './components/games/list';\nimport TicTacToeGame from './components/tic-tac-toe/game';\nimport Casino from './models/casino';\nimport Sidebar from './components/sidebar/Sidebar';\nimport Welcome from './components/Welcome';\nimport CreateGame from './components/CreateGame';\n\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    player: null,\n    games: [],\n    view: 'welcome',\n    //casinoAddress: '0xf1E9Cd488CA3722e232588C198eC42A53a3A95DB', // development\n    casinoAddress: \"0x4E7EB1E2d0ad4622CB93DCb9313ff5f3555E890f\", // ropsten\n    casino: null,\n    casinoBalance: null,\n    activeGame: null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = (await web3.eth.getAccounts()).map(x => x.toLowerCase());\n\n      // Register for updates\n      window.ethereum.on('accountsChanged', (accounts) => {\n        // Time to reload your interface with accounts[0]!\n        this.setState({ accounts: accounts.map(x => x.toLowerCase()), player: accounts[0].toLowerCase() });\n      })\n\n      // Casino\n      const casino = new Casino(web3, this.state.casinoAddress);\n      const games = await casino.getActiveGames();\n      const casinoBalance = await web3.eth.getBalance(this.state.casinoAddress);\n\n      // listen for events\n\n      // new game\n      casino.contract.events.NewTicTacToeGame(\n        {\n          filter: { registrator: this.props.player }\n        },\n        async (err, evt) => {\n          console.log(`Created new game with id=${evt.returnValues.id}, registrator=${evt.returnValues.registrator}, isX=${evt.returnValues.isX}`);\n          this.setState({ games: await casino.getActiveGames() });\n        }\n      );\n\n      const player = { address: accounts[0], balance: null };\n      player.balance = await web3.eth.getBalance(player.address);\n\n      // update some key things every few seconds\n      this.interval = setInterval(this.onRefresh.bind(this), 15000);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, games, casino, casinoBalance, player });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  async onRefresh() {\n    // Check the casino balance\n    const web3 = this.state.web3;\n    const casinoBalance = await web3.eth.getBalance(this.state.casinoAddress);\n    // Check our balance\n    const player = this.state.player;\n    player.balance = await web3.eth.getBalance(player.address);\n    this.setState({ casinoBalance, player });\n  }\n\n  onOpenGame(address) {\n    this.setState({ view: \"game\", activeGame: address });\n  }\n\n  onViewChange(view) {\n    this.setState({ view })\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <Container fluid>\n        <Row className=\"full-height\">\n          <Sidebar view={this.state.view} onViewChange={this.onViewChange.bind(this)} player={this.state.player} casinoAddress={this.state.casinoAddress} casinoBalance={this.state.casinoBalance} />\n          <Col className=\"full-height\">\n            { this.state.view === 'welcome' &&\n              <Welcome web3={this.state.web3} casinoBalance={this.state.casinoBalance} />\n            }\n            { this.state.view === \"list-games\" && \n              <GameList games={this.state.games} web3={this.state.web3} casino={this.state.casino} player={this.state.player} onOpenGame={this.onOpenGame.bind(this)} />\n            }\n            { this.state.view === \"create-game\" && \n              <CreateGame web3={this.state.web3} casino={this.state.casino} player={this.state.player} onOpenGame={this.onOpenGame.bind(this)} />\n            }\n            { this.state.view === \"game\" &&\n              <TicTacToeGame\n                web3={this.state.web3}\n                address={this.state.activeGame}\n                player={this.state.player}\n                />\n            }\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}